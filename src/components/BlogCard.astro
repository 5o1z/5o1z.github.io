---
import AvatarComponent from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { parseAuthors } from '@/lib/data-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import Link from './Link.astro'

interface Props {
  entry: CollectionEntry<'blog'>
}

const { entry } = Astro.props
const formattedDate = formatDate(entry.data.date)
const readTime = readingTime(entry.body!)
const authors = await parseAuthors(entry.data.authors ?? [])
---

<div
  class="hover:bg-secondary/50 rounded-xl border p-4 transition-colors duration-300 ease-in-out"
>
  <Link
    href={`/${entry.collection}/${entry.id}`}
    class="flex flex-col gap-4 sm:flex-row"
  >
    {
      entry.data.image && (
        <div class="max-w-3xs sm:shrink-0">
          <Image
            src={entry.data.image}
            alt={entry.data.title}
            width={1220}
            height={635}
            class="object-cover"
          />
        </div>
      )
    }

    <div class="grow">
      <div class="mb-1 relative">
        <div class="flex flex-wrap items-start">
          <h3 class="text-lg font-medium leading-tight pr-16">{entry.data.title}</h3>
          {entry.data.pinned && (
            <Badge variant="default" className="absolute top-0 right-0 flex items-center gap-x-1 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 text-xs">
              <Icon name="lucide:pin" class="size-3" />
              Pinned
            </Badge>
          )}
        </div>
      </div>
      <p class="text-muted-foreground mb-2 text-sm">{entry.data.description}</p>

      <div
        class="text-muted-foreground mb-2 flex flex-wrap items-center gap-x-2 text-xs"
      >
        {
          authors.length > 0 && (
            <>
              {authors.map((author) => (
                <div class="flex items-center gap-x-1.5">
                  <AvatarComponent
                    client:load
                    src={author.avatar}
                    alt={author.name}
                    fallback={author.name[0]}
                    className="size-6 rounded-full"
                  />
                  <span>{author.name}</span>
                </div>
              ))}
              <Separator orientation="vertical" className="h-4!" />
            </>
          )
        }
        <span>{formattedDate}</span>
        <Separator orientation="vertical" className="h-4!" />
        <span>{readTime}</span>
      </div>

      {
        entry.data.tags && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag) => (
              <Badge variant="secondary" className="flex items-center gap-x-1">
                <Icon name="lucide:hash" class="size-5" />
                {tag}
              </Badge>
            ))}
          </div>
        )
      }
    </div>
  </Link>
</div>
